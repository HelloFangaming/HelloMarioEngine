<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_big_warp</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_enemymaskbig</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario warping through a warp pipe

//Set the depth to behind tiles
depth = 11

//Don't stop warping yet
ready = 0

//Give it time before he can stop
alarm[0] = 10

//Default speed
speed = 1

//Whether warp Mario is being launched out of a cannon
cannon = 0

//Animate
image_speed = 0.15

//Whether Mario is holding something
holding = 0

//Held item sprite
myitem = noone

//Offset held item
offset = 0

//Is Mario flashing?
isflashing = 0

//Horizontal facing direction
direct = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enable gravity
gravity = 0.25
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Launch Mario out of a diagonal pipe cannon
audio_play_sound(snd_explode,0,0)
hspeed = 4
vspeed = -4
visible = 1

//Enable gravity
alarm[3] = 30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Launch Mario out of a pipe cannon
audio_play_sound(snd_explode,0,0)
vspeed = -4
visible = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario can stop warping at any time now
ready = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warp Mario logic

//If not in cannon mode
if cannon = 0
{

    //If Mario is moving horizontally
    if hspeed != 0
    {

        //Make him face in the direction he is moving in
        direct = sign(hspeed)

        //Animate
        image_speed = 0.15

        //Choose the appropriate sprite
        if holding = 0
            sprite_index = scr_mariowalk()
        else
        {
            sprite_index = scr_mariohold()
            direct = -direct
        }

    }

    //If Mario is moving vertically
    else
    {

        //Do not animate
        image_speed = 0

        //Choose the appropriate image index
        image_index = 0

        //Choose the appropriate sprite
        sprite_index = scr_mariowarp()

    }

    //If Mario is submerged in solids
    if collision_point(bbox_left,bbox_top,obj_solid,1,1)
    and collision_point(bbox_right,bbox_top,obj_solid,1,1)
    and collision_point(bbox_left,bbox_bottom,obj_solid,1,1)
    and collision_point(bbox_right,bbox_bottom,obj_solid,1,1)
    {

        //Go faster
        speed = 3

        //Become invisible
        visible = 0

    }

    //Otherwise
    else
    {

        //Play the warp sound if slowing down
        if speed = 3
            audio_play_sound(snd_warp,0,0)

        //Go slow
        speed = 1

        //Become visible
        visible = 1

    }

    //If he is ready to stop warping, and there are no solids, turn into Mario
    if ready = 1
    and not place_meeting(x,y,obj_solid)
        event_user(0)

}

//If he is in diagonal cannon mode, and moving down, turn into Mario
else if cannon = 2
and vspeed &gt; 0
    event_user(0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_right">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go right

//If not in cannon mode
if cannon = 0
{

    //Move right
    direction = 0

    //Snap to grid
    move_snap(8,8)

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_left">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go left

//If not in cannon mode
if cannon = 0
{

    //Move left
    direction = 180

    //Snap to grid
    move_snap(8,8)

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_down">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go down

//If not in cannon mode
if cannon = 0
{

    //Move down
    direction = 270

    //Snap to grid
    move_snap(8,8)

}

//If warp Mario is launched upwards, change into Mario
else if cannon = 1
    event_user(0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_up">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go up

//If not in cannon mode
if cannon = 0
{

    //Move up
    direction = 90

    //Snap to grid
    move_snap(8,8)

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_giantwarpcannon">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Giant diagonal warp cannon

//If warp Mario is not in cannon mode
if cannon = 0
{

    //Enable diagonal cannon mode
    cannon = 2

    //Stop moving
    speed = 0

    //Choose the appropriate sprite
    if holding = 0
        sprite_index = scr_mariorunjump()
    else
        sprite_index = scr_mariohold()

    //Do not animate
    image_speed = 0

    //Choose the appropriate image index
    image_index = 0

    //Face right
    direct = 1

    //Begin launch
    alarm[2] = 30

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_warpcannon">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Regular warp cannon

//If warp Mario is not in cannon mode
if cannon = 0
{

    //Enable cannon mode
    cannon = 1

    //Stop moving
    speed = 0

    //Choose the appropriate sprite
    sprite_index = scr_mariowarp()

    //Do not animate
    image_speed = 0

    //Choose the appropriate image index
    image_index = 0

    //Begin launch
    alarm[1] = 16

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_warproom">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warp to a new room

//With the warp object
with other
{

    //If the position needs to be changed in the new room
    if postchange != -1
    {

        //Remember the position and type
        global.postchange = postchange
        global.postx = postx+16
        global.posty = posty

    }

    //Go to the new room
    room_goto(myroom)

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_postchange">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warp to a new position

//Fade the screen
with obj_persistent event_user(0)

//Go to the new position
x = other.postx+16
y = other.posty
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn back into Mario

//Create Mario
with instance_create(x,y,obj_mario)
{

    //Retain speed, direction, and holding
    vspeed = other.vspeed
    hspeed = other.hspeed
    direct = other.direct
    holding = other.holding

}

//Destroy
instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draws Mario

//Draw item when Mario is moving horizontally
if holding != 0
and hspeed != 0
    draw_sprite(myitem,0,x-sprite_get_width(myitem)/2+sprite_get_xoffset(myitem)+10*direct,bbox_bottom-sprite_get_height(myitem)+sprite_get_yoffset(myitem)-1)

//Make Mario flash
if isflashing = 1
    shader_set(sha_invert)

//Draw Mario
draw_sprite_ext(sprite_index,image_index,round(x),y,direct,1,0,c_white,1)

//Reset flashing
if isflashing = 1
    shader_reset()

//Draw item when Mario is moving vertically
if holding != 0
and hspeed = 0
    draw_sprite(myitem,0,x-sprite_get_width(myitem)/2+sprite_get_xoffset(myitem),bbox_bottom-sprite_get_height(myitem)+sprite_get_yoffset(myitem))
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
