<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_big_slide</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_smallmask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario sliding on his merry way

//Slide type
//0: Normal, 1: Shell, 2: Penguin
type = 0

//Make Mario invincible, disable his controls, and disable skidding
with obj_mario
{
    invincible = 1
    disablecontrols = 1
    skidnow = 2
}

//Inherit Mario's horizontal speed and direction
hspeed = obj_mario.hspeed
direct = obj_mario.direct

//Prevent skidding
audio_stop_sound(snd_skid)

//Number of kills
hitpoint = 0

//Use the slide sprite
sprite_index = scr_marioslide()

//Create smoke
alarm[0] = 8
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario not invincible, enable his controls, and enable skidding
with obj_mario
{
    invincible = 0
    disablecontrols = 0
    skidnow = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change animation for special sliding

//Change to inshell sprite if shell sliding
if type = 1
    sprite_index = spr_inshell

//Stop animation if penguin sliding
else
{
    image_speed = 0
    image_index = 2
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create smoke

//Create smoke on the left for left slopes
if collision_rectangle(x-8,y+32,x+7,y+34,obj_slope_l,1,1)
or collision_rectangle(x-8,y+32,x+7,y+34,obj_slope_sl,1,1)
{
    with instance_create(x-8,y+24,obj_smoke)
    {
        sprite_index = spr_skidsmoke
        depth = -6
    }
}

//Create smoke on the right for right slopes
else if collision_rectangle(x-8,y+32,x+7,y+34,obj_slope_r,1,1)
or collision_rectangle(x-8,y+32,x+7,y+34,obj_slope_sr,1,1)
{
    with instance_create(x+1,y+24,obj_smoke)
    {
        sprite_index = spr_skidsmoke
        depth = -6
    }
}

//Create more smoke
alarm[0] = 8
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sliding Mario logic

//If Mario exists and down is being pressed
if instance_exists(obj_mario)
and keyboard_check(vk_down)
{

    //Give Mario the correct horizontal speed and direction
    obj_mario.hspeed = hspeed
    obj_mario.direct = direct

    //Snap Mario to x
    obj_mario.x = x

    //Snap to Mario's y
    y = obj_mario.y

    //Make sure Mario is invincible
    obj_mario.invincible = 1

}

//Otherwise, destroy
else
{
    instance_destroy()
    exit
}

//If Mario is normal sliding
if type = 0
{

    //Use the slide sprite
    sprite_index = scr_marioslide()

    //Use the appropriate mask
    if global.powerup = cs_small
        mask_index = spr_smallmask
    else
        mask_index = spr_bigmask

}

//If Mario is special sliding
else
{

    //If Mario is shell sliding while not shell Mario, or penguin sliding while not penguin Mario, destroy
    if (type = 1 and global.powerup != cs_shell)
    or (type = 2 and global.powerup != cs_penguin)
        instance_destroy()

    //If Mario is on the ground, and presses shift
    if keyboard_check_pressed(vk_shift)
    and obj_mario.state &lt; 2
    {

        //Play the jump sound
        audio_play_sound(snd_jump,0,0)

        //With Mario
        with obj_mario
        {

            //Move upwards
            vspeed = -3

            //Switch to the jump state
            state = 2

        }

    }

    //If Mario is penguin sliding
    if type = 2
    {

        //Change the direction based on the horizontal speed
        if hspeed &gt; 0
            direct = 1
        else
            direct = -1

    }

    //Make the image speed depend on the speed for the inshell sprite
    else if sprite_index = spr_inshell
        image_speed = speed/6

}

//Move more to the left if on a right slope
if collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+3,obj_slope_sr,1,0)
or collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+3,obj_slope_r,1,0)
    hspeed -= 0.1

//Move more to the right if on a left slope
else if collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+3,obj_slope_sl,1,0)
or collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+3,obj_slope_l,1,0)
    hspeed += 0.1

//Destroy if not sliding fast enough
else if abs(hspeed) &lt; 0.05
    instance_destroy()

//Prevent Mario from sliding too fast
if hspeed &gt; 3
    hspeed = 3
if hspeed &lt; -3
    hspeed = -3

//If Mario is on the ground, and not on a slope
if obj_mario.state &lt; 2
and not collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+3,obj_slopeparent,1,0)
{

    //Set the friction based on the sliding type
    if type = 0
        friction = 0.1
    else
        friction = 0.02

}

//Otherwise, disable friction
else
    friction = 0

//If Mario slides into a wall
if (hspeed &gt; 0 and collision_rectangle(bbox_right,bbox_top+4,bbox_right+1+hspeed,bbox_bottom-1,obj_solid,0,0))
or (hspeed &lt; 0 and collision_rectangle(bbox_left-1+hspeed,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,0,0))
{

    //If Mario is shell sliding
    if type = 1
    {

        //Play a bump sound
        audio_play_sound(snd_bump,0,0)

        //Bump blocks
        instance_create(x-8,y+16,obj_blockbumper)

        //Shell bounce effects
        with instance_create(x+8*sign(hspeed),y+24,obj_smoke) sprite_index = spr_shellbump

        //Reverse horizontal speed
        hspeed = -hspeed

    }

    //Otherwise, destroy
    else
        instance_destroy()

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemyparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hurt enemies
if other.hardness &lt; 99
{
    scr_musicalscale(id,other.id,1)
    with other event_user(0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prepare for special sliding

//If Mario is in a penguin suit
if global.powerup = cs_penguin
{

    //Use penguin sliding
    type = 2

    //Use penguin swim sprite
    sprite_index = spr_mario_penguin_swim

}
else
{

    //Use shell sliding
    type = 1

    //Use shell ducking sprite
    sprite_index = spr_mario_shell_ducking

}

//Animate
image_speed = 0.3

//Force Mario to duck
obj_mario.isduck = 1

//Change animation
alarm[1] = 6
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Force Mario to use the correct sprite
if instance_exists(obj_mario)
{
    obj_mario.sprite_index = sprite_index
    obj_mario.image_index = image_index
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,-16</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
