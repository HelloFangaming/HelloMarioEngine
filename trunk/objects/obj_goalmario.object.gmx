<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_big_goal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario on the flagpole

//Stop the music and time
with obj_levelmanager
{
    alarm[1] = 1
    alarm[2] = 0
}

//Remember whether a level or secret level was cleared
if instance_exists(obj_flagpole_secret)
    global.clear = 2
else
    global.clear = 1

//Forget checkpoints
global.checkpoint = noone

//Goal Mario's state
ready = 0

//Do not animate
image_speed = 0

//Use the goal sprite
sprite_index = scr_mariogoal()

//Move down
vspeed = 1.5

//Start walking after reaching the bottom
alarm[0] = 130

//Stop some sounds that may be playing
audio_stop_sound(snd_starman)
audio_stop_sound(snd_switchsong)

//Play the flagpole sound
audio_play_sound(snd_flagpole,0,0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return to the world map after the music is done playing
if audio_is_playing(snd_flagsong)
    alarm[3] = 1
else
    scr_return()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take points off the time, and add to the score

//If there is more than 4 seconds left
if global.time &gt; 4
{

    //Add 500 to the score
    score += 500

    //Subtract 5 seconds from the time
    global.time -= 5

}

//Otherwise
else
{

    //Add 100 to the score
    score += 100

    //Decrement the time
    global.time--

}

//If there is no time left
if global.time = 0
{

    //Play the count end sound
    audio_play_sound(snd_countend,0,0)

    //Return to the world map
    alarm[3] = 1

}

//Otherwise
else
{

    //Play the count sound
    audio_play_sound(snd_count,0,0)

    //Continue counting down
    alarm[2] = 4

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade into the castle
if image_alpha &gt; 0
{
    image_alpha -= 0.05
    alarm[1] = 1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start walking to the goal castle

//Set state
ready = 2

//Play the flagpole music
audio_play_sound(snd_flagsong,1,0)

//Mario shouts in excitement
audio_play_sound(snd_yahoo,0,0)

//Face right
image_xscale = 1

//Use the jump sprite
sprite_index = scr_mariojump()

//Jump rightwards
hspeed = 1
vspeed = -3

//Enable gravity
gravity = 0.225
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy all enemies
with obj_parenemy
{
    instance_create(x,y,obj_smoke)
    instance_destroy()
}
with obj_parenemy2
{
    instance_create(x,y,obj_smoke)
    instance_destroy()
}
with obj_parenemyactive
{
    instance_create(x,y,obj_smoke)
    instance_destroy()
}
with obj_shell
{
    instance_create(x,y,obj_smoke)
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solidtop">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Land on the ground

//Disable gravity
gravity = 0

//Stop moving down
vspeed = 0

//Snap to the collision object
y = other.y-32

//If Mario finished sliding down the flagpole
if ready = 0
{

    //Increment state
    ready++

    //Move left 3 pixels
    x -= 3

    //Face left
    image_xscale = -1

}

//If Mario landed on the ground after jumping off the flagpole
else if ready = 2
{

    //Increment state
    ready++

    //Use walking sprite
    sprite_index = scr_mariowalk()

    //Animate
    image_speed = 0.15

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_incastle">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enter the goal castle

//If goal Mario walked far enough
if x &gt; other.x
and ready = 3
{

    //Snap to the castle's door
    x = other.x

    //Increment the state variable
    ready++

    //Stop moving
    hspeed = 0

    //Fade into the castle
    alarm[1] = 10

    //Start the countdown if there is a time limit
    if global.time &gt; 0
        alarm[2] = 1
    else
        alarm[3] = 1

    //Do not animate
    image_speed = 0

    //Use the correct image index
    image_index = 0

    //Use the warp sprite
    sprite_index = scr_mariowarp()

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
