<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_big_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///It's a me, Mario!

//Mario's current state
//0: Stand, 1: Walk, 2: Jump, 3: Climb 4: Wall Climb/Jump
state = 0

//Mario's direction
//-1: Left, 1: Right
direct = 1

//Whether Mario is holding something
//0: Nothing, 1: Overhead, 2: On Front 3: Can't Hold Stuff
holding = 0

//Variable jump state
//0: Can Jump, 1: Variable Jump, 2: No Variable Jump
jumpnow = 0

//Is Mario skidding?
skidnow = 0

//Is Mario swimming?
isswim = 0

//Is Mario ducking?
isduck = 0

//Is Mario invincible?
//0: Normal, 1: Invincible, -1: Phase through
invincible = 0

//Is Mario smacking a net?
netsmack = 0

//Is Mario kicking something?
iamkicking = 0

//Is Mario spin jumping?
stompstyle = 0

//Is Mario on a slippery surface?
isslip = 0

//Is Mario's controls disabled?
disablecontrols = 0

//Is carrot/bee Mario floating?
isfloating = 0

//Is the float sound effect playing?
floatnow = 0

//How much longer can bee Mario fly?
beefly = 0

//Did Mario wall jump?
walljump = 0

//Is Mario firing a projectile?
firing = 0

//Is leaf/tanooki Mario wiggling his tail?
wiggle = 0

//What direction is frog/penguin Mario swimming in?
swimtype = 0

//Is frog/penguin Mario's swim sound effect looping?
noisy = 0

//Is Mario flashing?
isflashing = 0

//How many consecutive stomps has Mario made?
hitpoint = 0

//State delay variable
statedelay = 0

//Handles Mario's skid smoke
alarm[5] = 8

//Handles Mario's underwater bubbles
alarm[9] = 24 + random(96)

//Did Mario carry something over from another room?
if global.shallihold &gt; 0
{
    holding = global.shallihold
    global.shallihold = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop these sounds from playing

//Skid sound
if skidnow = 1
    audio_stop_sound(snd_skid)

//Swim sound
if noisy = 1
    audio_stop_sound(snd_swim)

//Float sound
if floatnow = 1
    audio_stop_sound(snd_spin)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles powerup specific projectiles, tail spinning, and statue morphing
if disablecontrols = 0
and holding = 0
and stompstyle = 0
{

    //Tanooki Statue
    if global.powerup = cs_tanooki
    and not instance_exists(obj_spinner)
    and keyboard_check(vk_down)
        instance_create(x,y,obj_statue)

    //If Mario is not ducking
    else if isduck = 0
    {

        //Fire Ball
        if global.powerup = cs_fire
        and instance_number(obj_fireball) &lt; 2
        {
            firing = 9
            with instance_create(x,y+16,obj_fireball) hspeed = 3*other.direct
        }

        //Hammer
        else if global.powerup = cs_hammer
        and instance_number(obj_hammer) &lt; 2
        {
            firing = 9
            with instance_create(x,y+16,obj_hammer) hspeed = 1.5*other.direct+other.hspeed
        }

        //Tail Spin
        else if (global.powerup = cs_leaf or global.powerup = cs_tanooki)
        and not instance_exists(obj_spinner)
            instance_create(x,y,obj_spinner)

        //Bomb
        else if global.powerup = cs_bomb
        and instance_number(obj_minibomb) &lt; 1
        {
            firing = 9
            with instance_create(x-4,y+16,obj_minibomb) hspeed = 1.5*other.direct+other.hspeed
        }

        //Ice Ball
        else if (global.powerup = cs_ice or (global.powerup = cs_penguin and isswim = 0))
        and not instance_exists(obj_iceball)
        {
            firing = 9
            with instance_create(x,y+16,obj_iceball) hspeed = 3*other.direct
        }

        //Super Ball
        else if global.powerup = cs_super
        and instance_number(obj_superball) &lt; 2
        {
            firing = 9
            with instance_create(x,y+16,obj_superball) hspeed = 2*other.direct
        }

        //Shuriken
        else if global.powerup = cs_ninja
        and instance_number(obj_shuriken) &lt; 2
        {
            firing = 9
            with instance_create(x,y+20,obj_shuriken) hspeed = 5*other.direct
        }

        //Boomerang
        else if global.powerup = cs_boomerang
        and instance_number(obj_boomerang_b) &lt; 2
        {
            firing = 9
            with instance_create(x-8,y+16,obj_boomerang_b) hspeed = 1.5*other.direct
        }

    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Mario's underwater bubble effect
if isswim = 1
    instance_create(x-2+6*direct,bbox_top+7,obj_bubble)
alarm[9] = 24 + random(96)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Mario's second spin jump projectile

//Fire Ball
if global.powerup = cs_fire
and instance_number(obj_fireball) &lt; 2
    with instance_create(x,y+16,obj_fireball) hspeed = -3*other.direct

//Hammer
else if global.powerup = cs_hammer
and instance_number(obj_hammer) &lt; 2
    with instance_create(x,y+16,obj_hammer) hspeed = -1.5*other.direct

//Ice Ball
else if (global.powerup = cs_ice or global.powerup = cs_penguin)
and instance_number(obj_iceball) &lt; 1
    with instance_create(x,y+16,obj_iceball) hspeed = -3*other.direct

//Super Ball
else if global.powerup = cs_super
and instance_number(obj_superball) &lt; 2
    with instance_create(x,y+16,obj_superball) hspeed = -2*other.direct

//Shuriken
else if global.powerup = cs_ninja
and instance_number(obj_shuriken) &lt; 2
    with instance_create(x,y+20,obj_shuriken) hspeed = -5*other.direct
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Mario's first spin jump projectile

//Fire Ball
if global.powerup = cs_fire
and instance_number(obj_fireball) &lt; 2
    with instance_create(x,y+16,obj_fireball) hspeed = 3*other.direct

//Hammer
else if global.powerup = cs_hammer
and instance_number(obj_hammer) &lt; 2
    with instance_create(x,y+16,obj_hammer) hspeed = 1.5*other.direct

//Ice Ball
else if (global.powerup = cs_ice or global.powerup = cs_penguin)
and instance_number(obj_iceball) &lt; 1
    with instance_create(x,y+16,obj_iceball) hspeed = 3*other.direct

//Super Ball
else if global.powerup = cs_super
and instance_number(obj_superball) &lt; 2
    with instance_create(x,y+16,obj_superball) hspeed = 2*other.direct

//Shuriken
else if global.powerup = cs_ninja
and instance_number(obj_shuriken) &lt; 2
    with instance_create(x,y+20,obj_shuriken) hspeed = 5*other.direct

//Second Projectile
alarm[8] = 10
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Finish Mario's kicking animation
iamkicking = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Mario's skid smoke
if skidnow = 1
{

    //If Mario is wall jumping, reverse where the smoke appears
    if (direct = 1 and state != 4)
    or (direct = -1 and state = 4)
    {
        with instance_create(x+1,y+24,obj_smoke)
        {
            sprite_index = spr_skidsmoke
            depth = -6
        }
    }
    else
    {
        with instance_create(x-8,y+24,obj_smoke)
        {
            sprite_index = spr_skidsmoke
            depth = -6
        }
    }

}
alarm[5] = 8
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Mario's net smack
netsmack = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario no longer invincible
invincible = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario's alpha blink stop
image_alpha = 1
if invincible = 1
    alarm[1] = 4
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario's alpha blink
image_alpha = 0.4
alarm[2] = 4
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset holding variable
holding = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles Mario's sprites

//Disable ducking for certain powerups
if global.powerup = cs_small
or global.powerup = cs_frog
    isduck = 0

//If Mario is not ducking
if isduck = 0
{

    //Select Mask
    if global.powerup = cs_small
        mask_index = spr_smallmask
    else
        mask_index = spr_bigmask

    //Shoot Animation
    if global.powerup = cs_fire
    or global.powerup = cs_hammer
    or global.powerup = cs_bomb
    or global.powerup = cs_ice
    or global.powerup = cs_super
    or global.powerup = cs_ninja
    or global.powerup = cs_penguin
    or global.powerup = cs_boomerang
    {
        if firing &gt; 0
            firing--
    }
    else
        firing = 0

    //Tail Wiggling
    if global.powerup = cs_leaf
    or global.powerup = cs_tanooki
    {
        if state = 2
        and stompstyle = 0
        {
            if wiggle &gt; 1
                wiggle--
            if wiggle &gt; 12
                image_index = 3
            else if wiggle &gt; 8
                image_index = 2
            else if wiggle &gt; 4
                image_index = 1
            else if wiggle &gt; 1
                image_index = 2
            else if wiggle = 1
                image_index = 1
            else
                image_index = 0
        }
        else
            wiggle = 0
    }
    else
        wiggle = 0

    //Not Holding Anything
    if holding = 0
    {

        //Standing State
        if state = 0
        {

            //Shooting Projectiles
            if firing &gt; 0
            {
                image_speed = 0
                if firing &lt; 6 and firing &gt; 3
                    image_index = 1
                else
                    image_index = 0
                sprite_index = scr_marioshoot()
            }

            //Default Standing
            else
            {
                image_speed = 0
                image_index = 0
                sprite_index = scr_mariowalk()
            }

        }

        //Walking State
        else if state = 1
        {

            //Animate based on horizontal speed
            image_speed = hspeed/10

            //Frog Mario only walks
            if global.powerup = cs_frog
                sprite_index = scr_mariowalk()

            //Skid when moving and facing in opposite directions
            else if (direct = 1 and hspeed &lt; -0.001)
            or (direct = -1 and hspeed &gt; 0.001)
            {
                sprite_index = scr_marioskid()
                if skidnow = 0
                {
                    skidnow = 1
                    audio_play_sound(snd_skid,1,1)
                }
            }

            //Default Walking
            else
            {

                //Run only when P-Meter is full
                if obj_levelmanager.pmeter &lt; 6
                    sprite_index = scr_mariowalk()
                else
                    sprite_index = scr_mariorun()

            }

        }

        //Jumping State
        else if state = 2
        {

            //Swimming
            if isswim = 1
            {

                //If frog/penguin Mario is not swimming
                if noisy = 0
                {
                    sprite_index = scr_marioswim()
                    image_speed = 0
                    if vspeed &lt; 0
                        image_index = 1
                    else
                        image_index = 0
                }

            }

            //Spin Jumping
            else if stompstyle = 1
            {

                //Propeller Mario Flying
                if global.powerup = cs_propeller
                {

                    //Propeller Mario floating down slowly
                    if vspeed &gt; 0
                    and vspeed &lt; 2
                    {
                        image_speed = 0.3
                        sprite_index = spr_mario_propeller_walk
                    }

                    //Default propeller Mario flying
                    else
                    {
                        image_speed = vspeed/10
                        sprite_index = spr_mario_propeller_fly
                    }

                }

                //Default Spin Jumping
                else
                {
                    image_speed = 0.5
                    sprite_index = scr_mariowarp()
                }

            }

            //Shooting Projectiles
            else if firing &gt; 0
            {
                image_speed = 0
                if firing &lt; 6 and firing &gt; 3
                    image_index = 1
                else
                    image_index = 0

                //Penguin Mario Hotfix
                if global.powerup = cs_penguin
                    sprite_index = spr_mario_penguin_shoot2
                else
                    sprite_index = scr_marioswim()

            }

            //Default Jumping
            else
            {

                //Floating Animation
                if global.powerup = cs_carrot
                or global.powerup = cs_bee
                {
                    if isfloating = 1
                        image_speed = 0.15
                    else
                        image_index = 0
                }

                //Run only when P-Meter is full
                if obj_levelmanager.pmeter &lt; 6
                    sprite_index = scr_mariojump()
                else
                    sprite_index = scr_mariorunjump()

            }

        }

        //Special Swimming Animations
        if global.powerup = cs_frog
        or global.powerup = cs_penguin
        {
            if isswim = 1
            {
                if swimtype = 0
                    sprite_index = scr_marioswim()
                if swimtype = 1
                    sprite_index = scr_marioswim2()
                if swimtype = 2
                    sprite_index = scr_marioswim3()
                if noisy = 1
                    image_speed = 0.15
                else
                    image_speed = 0
            }
        }

    }

    //Holding Something
    else
    {

        //Standing State
        if state = 0
        {
            image_speed = 0
            image_index = 0
        }

        //Walking State
        if state = 1
            image_speed = hspeed/10

        //Jumping State
        if state = 2
        {
            image_speed = 0
            if global.powerup = cs_small
                image_index = 1
            else
                image_index = 2
        }

        //Carrying an item above his head
        if holding = 1
            sprite_index = scr_mariocarry()

        //Holding an item on front of him
        else if holding = 2
            sprite_index = scr_mariohold()

    }

    //Climbing
    if state = 3
    {
        if speed = 0
            image_speed = 0
        else
            image_speed = 0.15
        sprite_index = scr_marioclimb()
    }

    //Wall Climbing + Wall Jumping
    else if state = 4
    {

        //Ninja Mario Wall Climbing
        if global.powerup = cs_ninja
        {
            sprite_index = spr_mario_ninja_wallclimb
            if vspeed = 0
                image_speed = 0
            else
                image_speed = 0.15
        }

        //Wall Jumping
        else
        {
            sprite_index = scr_marioskid()
            if skidnow = 0
            {
                skidnow = 1
                audio_play_sound(snd_skid,1,1)
            }
        }

    }

    //Kicking Animation
    if iamkicking = 1
        sprite_index = scr_mariokick()

}

//If Mario is ducking
else if isduck = 1
{

    //Use Small Mask
    mask_index = spr_smallmask

    //Default Ducking
    sprite_index = scr_marioduck()

}

//Stop the skid sound effect
if sprite_index != scr_marioskid()
and skidnow = 1
{
    audio_stop_sound(snd_skid)
    skidnow = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles Mario's physics and movement

//Embed Mario into the slope if he is walking to ensure correct slope mechanics
if collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+4,obj_slopeparent,1,0)
and not collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom-4,obj_slopeparent,1,0)
and state = 1
    y+=4

///Handle slope collisions
if collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom,obj_slopeparent,1,0)
and not collision_rectangle(bbox_left,bbox_bottom-8,bbox_right,bbox_bottom-8,obj_slopeparent,1,0)
{

    //If Mario is moving down onto a slope
    if vspeed &gt; 0
    {

        //Stop vertical movement
        vspeed = 0
        gravity = 0

        //Allow Mario to jump
        if jumpnow = 2
            jumpnow = 0

        //Reset hit counter
        hitpoint = 0

        //Reset bee flying
        beefly = 0

        //Reset wall jump
        walljump = 0

    }

    //Prevent Mario from getting embed inside a slope
    if vspeed &gt; -0.8
        while collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom,obj_slopeparent,1,0)
            y--

}

//Select a different step event based on Mario's state
if isswim = 0
{

    //Climb script
    if state = 3
        event_user(4)

    //Wall climb/jump script
    else if state = 4
        event_user(5)

    //Default movement script
    else
        event_user(2)

}

//Swim script
else
    event_user(3)

//If Mario is bumping into a wall to the right
if hspeed &gt; 0
and collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0)
{

    //Stop Mario's horizontal speed
    hspeed = 0

    //Prevent Mario from getting embed into the wall
    while collision_rectangle(bbox_right,bbox_top+4,bbox_right,bbox_bottom-1,obj_solid,1,0)
    and not collision_point(x,bbox_top+4,obj_solid,0,0)
        x--

}

//If Mario is bumping into a wall to the left
else if hspeed &lt; 0
and collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0)
{

    //Stop Mario's horizontal speed
    hspeed = 0

    //Prevent Mario from getting embed into the wall
    while collision_rectangle(bbox_left,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0)
    and not collision_point(x,bbox_top+4,obj_solid,0,0)
        x++

}

//If Mario's head is bumping the ceiling
if vspeed &lt; 0
and collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_solid,1,0)
{

    //Prevent Mario's head from getting embed in the ceiling
    if state &gt; 1
        while collision_rectangle(bbox_left,bbox_top+1,bbox_right,bbox_top+1,obj_solid,1,0)
            y++

    //Stop vertical movement
    vspeed = 0

    //If frog/penguin Mario is not swimming, and Mario is not climbing or wall climbing
    if noisy = 0
    and state &lt; 3
    {

        //Bump sound
        audio_play_sound(snd_bump,0,0)

        //Stop variable jumping
        jumpnow = 2

        //Max out Bee Mario's flight timer
        beefly = 128

    }

}

//If Mario is not climbing or wall climbing
if state &lt; 3
{

    //If Mario's controls are disabled, and he is not jumping
    if state != 2
    and disablecontrols = 0
    {

        //Makes Mario duck
        if keyboard_check(vk_down)
        and global.powerup != cs_small
        and global.powerup != cs_frog
        and holding = 0
        and noisy = 0
            isduck = 1

        //Stops Mario from ducking
        else if not keyboard_check(vk_down)
        and not collision_rectangle(bbox_left,bbox_top-16,bbox_right,bbox_top,obj_solid,1,0)
            isduck = 0

    }

    //Handles powerup specific projectiles, tail spinning, and statue morphing
    if keyboard_check_pressed(vk_control)
    and obj_levelmanager.barrier = 0
        alarm[10] = 1

}

//If Mario is climbing or wall climbing
else
{

    //Disable ducking
    isduck = 0

    //Disable the spin jump kill ability
    stompstyle = 0

}

//If Mario comes into contact with water, and is not already swimming
if place_meeting(x,y,obj_swim)
and isswim = 0
{

    //Make Mario start swimming
    isswim = 1

    //If Mario is entering from the top
    if collision_point(x,y+33,obj_swim,0,0)
    and not collision_point(x,y,obj_swim,0,0)
    {

        //Reset Mario's vertical speed
        vspeed = 0

        //Create a water splash effect
        with instance_create(x-8,y+17,obj_smoke)
        {
            sprite_index = spr_splash
            depth = -6
        }

    }

    //Disable carrot and bee Mario floating
    isfloating = 0

    //Stop carrot/bee Mario's floating sound
    if floatnow = 1
    {
        audio_stop_sound(snd_spin)
        floatnow = 0
    }

    //Make sure Mario is not climbing
    if state &gt; 2
        state = 2

}

//Prevents Mario from going too high
if y &lt; -96
    y = -96

//Kill Mario if he falls out of the room
else if bbox_top &gt; room_height
{
    instance_create(x,room_height-32,obj_deadmario)
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solidtop">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle solid top collision

//Is Mario hign enough to be standing on it?
if bbox_bottom &lt; other.yprevious+5
and vspeed &gt; 0
{

    //Snap to position
    y = other.y-32

    //Stop vertical movement
    vspeed = 0
    gravity = 0

    //Allow Mario to jump
    if jumpnow = 2
        jumpnow = 0

    //Reset hit counter
    hitpoint = 0

    //Reset bee flying
    beefly = 0

    //Reset wall jump
    walljump = 0

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario kick something

//Mario is now kicking
iamkicking = 1

//Finish kicking animation
alarm[6] = 10
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Give Mario temporary invincibility

//If Mario is not star invincible
if invincible != -1
{

    //Make Mario invincible
    invincible = 1

    //Make Mario's alpha blink
    alarm[1] = 1

    //Make Mario not invincible after a cooldown
    alarm[3] = 120

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario's wall climbing + wall jumping step event

//If Mario does not have the appropriate powerup
if (global.powerup != cs_ninja and global.powerup != cs_walljump)

//Or if ninja Mario is no longer facing a wall to climb
or (global.powerup = cs_ninja
and ((direct = 1 and not collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0))
or (direct = -1 and not collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0))))

//Or if wall jump Mario moves away from the wall, or is not against a wall
or (global.powerup != cs_ninja
and (direct = -1 and (keyboard_check(vk_left) or not collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0))
or direct = 1 and (keyboard_check(vk_right) or not collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0))))

//Or if Mario reaches the floor
or collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,0)
or collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_slopeparent,1,0)
{

    //Switch to the jump state
    state = 2

    //Disable variable jumping
    jumpnow = 0

    //Do not execute the rest of this event
    exit

}

//If Mario is in the ninja suit
if global.powerup = cs_ninja
{
    //Handle moving up
    if keyboard_check(vk_up)
    and not keyboard_check(vk_down)
    and disablecontrols = 0
        vspeed = -1

    //Handle moving down
    else if keyboard_check(vk_down)
    and not keyboard_check(vk_up)
    and disablecontrols = 0
        vspeed = 1

    //Stop moving
    else
        vspeed = 0
}

//If Mario is just wall jumping, slide down the wall
else
    vspeed = 1

//Handle jumping
if keyboard_check_pressed(vk_shift)
and disablecontrols = 0
{

    //Jump
    vspeed = -3.75

    //Play the jump sound
    audio_play_sound(snd_jump,0,0)

    //Enable variable jumping
    jumpnow = 1

    //Switch to the jump state
    state = 2

    //Reverse direction if Mario is in the ninja suit
    if global.powerup = cs_ninja
        direct = -direct

    //Otherwise, make wall jump effects
    else
    {
        audio_play_sound(snd_stomp,0,0)
        instance_create(x,y+32,obj_spinthump)
    }

    //Move away from the wall
    hspeed = 3*direct

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario's climbing step event

//If Mario's controls are not disabled
if disablecontrols = 0
{

    //Handle moving left
    if keyboard_check(vk_left)
    and not keyboard_check(vk_right)
    {
        hspeed = -1
        direct = -1
    }

    //Handle moving right
    else if keyboard_check(vk_right)
    and not keyboard_check(vk_left)
    {
        hspeed = 1
        direct = 1
    }

    //Stop horizontal movement
    else
        hspeed = 0

    //Handle moving up
    if keyboard_check(vk_up)
    and not keyboard_check(vk_down)
        vspeed = -1

    //Handle moving down
    else if keyboard_check(vk_down)
    and not keyboard_check(vk_up)
        vspeed = 1

    //Stop vertical movement
    else
        vspeed = 0

    //Handle jumping off of a climbable surface
    if keyboard_check_pressed(vk_shift)
    {

        //Jump
        vspeed = -3.75

        //Play the jump sound
        audio_play_sound(snd_jump,0,0)

        //Enable variable jumping
        jumpnow = 1

        //Switch to the jump state
        state = 2

    }

}

//Stop moving
else
    speed = 0

//If Mario is no longer on a climbable surface
if not place_meeting(x,y,obj_climb)
{

    //Switch to the jump state
    state = 0

    //Disable variable jumping
    jumpnow = 0

}

//Smack the net to kill Net Koopas
if keyboard_check_pressed(vk_control)
and place_meeting(x,y,obj_climb_net)
{

    //The kill variable that Net Koopas check for
    netsmack = 1

    //Disable the kill variable after a short time
    alarm[4] = 2

    //The sound of Mario smacking the net
    audio_play_sound(snd_bump,0,0)

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario's swimming step event

//Handles frog and penguin Mario's swim ability if he is not holding anything
if (global.powerup = cs_frog or global.powerup = cs_penguin)
and holding = 0
{

    //If Mario's controls are not disabled
    if disablecontrols = 0
    {

        //Swim upwards
        if keyboard_check(vk_up)
        and not keyboard_check(vk_down)
        {

            //Move up
            vspeed = -1.5

            //Set the swim type
            swimtype = 1

        }

        //Swim downwards
        else if keyboard_check(vk_down)
        and not keyboard_check(vk_up)
        {

            //Move down
            vspeed = 1.5

            //Set the swim type
            swimtype = 2

        }

        //Stop swimming vertically
        else
            vspeed = 0

        //Swim to the left
        if keyboard_check(vk_left)
        and not keyboard_check(vk_right)
        {

            //Move left
            hspeed = -1.5

            //Set the swim type
            swimtype = 0

            //Face left
            direct = -1

        }

        //Swim to the right
        else if keyboard_check(vk_right)
        and not keyboard_check(vk_left)
        {

            //Move right
            hspeed = 1.5

            //Set the swim type
            swimtype = 0

            //Face right
            direct = 1

        }

        //Stop swimming horizontally
        else
            hspeed = 0

    }

    //Stop swimming
    else
        speed = 0

    //If the swim sound is not looping, but Mario is moving, loop the sound
    if speed != 0
    and noisy = 0
    {
        noisy = 1
        audio_play_sound(snd_swim,0,1)
    }

    //If the swim sound is looping, but Mario is not moving, stop the sound
    else if speed = 0
    and noisy = 1
    {
        noisy = 0
        audio_stop_sound(snd_swim)
    }

    //Good swimmers are not affected by gravity
    gravity = 0

    //Perpetual jump state
    state = 2

    //Prevent ducking
    isduck = 0

}

//The default swim script
else
{

    //Figure out Mario's state
    if (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,0)
    or collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_slopeparent,1,0))
    and gravity = 0
    {

        //Figure out if Mario is standing or walking
        if hspeed = 0
            state = 0
        else
            state = 1

        //Reset state delay
        statedelay = 0

    }

    //Mario is jumping if there is no ground below him
    else
    {

        //Delay the change to the jump state
        if statedelay &gt; 4
            state = 2
        else
            statedelay++

        //Set gravity
        gravity = 0.125

    }

    //Prevent Mario from falling down too fast
    if vspeed &gt; 1.5
        vspeed = 1.5

    //Handles swimming
    if keyboard_check_pressed(vk_shift)
    and disablecontrols = 0
    {

        //Swim higher if up is being pressed
        if keyboard_check(vk_up)
            vspeed = -3.5

        //Swim lower if down is being pressed
        else if keyboard_check(vk_down)
        and isduck = 0
            vspeed = -1

        //Default swim height
        else
            vspeed = -2.5

        //Play the swim sound
        audio_play_sound(snd_swim,0,0)

        //Switch to the jump state
        state = 2

    }

    //Handles moving right
    if keyboard_check(vk_right)
    and not keyboard_check(vk_left)
    and disablecontrols = 0
    and (isduck = 0 or state = 2)
    {

        //Accelerate more if he is skidding
        if hspeed &lt; 0
            hspeed += 0.075

        //Accelerate
        hspeed += 0.06

        //Face right
        direct = 1

    }

    //Handles moving left
    else if keyboard_check(vk_left)
    and not keyboard_check(vk_right)
    and disablecontrols = 0
    and (isduck = 0 or state = 2)
    {

        //Accelerate more if he is skidding
        if hspeed &gt; 0
            hspeed += -0.075

        //Accelerate
        hspeed += -0.06

        //Fsce left
        direct = -1

    }

    //If Mario is not trying to move to the left or right
    else
    {

        //Slow down Mario's horizontal speed
        if hspeed &gt; 0
            hspeed-=0.05
        if hspeed &lt; 0
            hspeed+=0.05

        //If Mario is slow enough, stop his horizontal speed entirely
        if abs(hspeed) &lt; 0.05
            hspeed = 0

    }

    //Prevent Mario from moving too fast, and let him move faster when not on the ground
    if state = 2
    {
        if hspeed &gt; 1.5
            hspeed = 1.5
        if hspeed &lt; -1.5
            hspeed = -1.5
    }
    else
    {
        if hspeed &gt; 0.5
            hspeed = 0.5
        if hspeed &lt; -0.5
            hspeed = -0.5
    }

    //Make sure that the swim sound is not looping
    if noisy = 1
    {
        noisy = 0
        audio_stop_sound(snd_swim)
    }

}

//If Mario is no longer in water
if not place_meeting(x,y,obj_swim)
{

    //Make Mario stop swimming
    isswim = 0

    //Reset variable jumping
    jumpnow = 0

    //Reset bee Mario's timer
    beefly = 0

    //Reset wall jump
    walljump = 0

    //If Mario came out of the water from the top
    if place_meeting(x,y+2,obj_swim)
    {

        //Create the splash effect
        with instance_create(x-8,y+17,obj_smoke)
        {
            sprite_index = spr_splash
            depth = -6
        }

        //Jump out of the water if shift is being held
        if keyboard_check(vk_shift)
        {
            vspeed = -3.85
            jumpnow = 1
        }

    }

    //Make sure that the swim sound is not looping
    if noisy = 1
    {
        noisy = 0
        audio_stop_sound(snd_swim)
    }

}

//Disable the spin jump kill ability if Mario is not in a shoe
if global.yoshi != 2
    stompstyle = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario's default step event

//Figure out Mario's state
if (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,0)
or collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_slopeparent,1,0))
and gravity = 0
{

    //Figure out if Mario is standing or walking
    if hspeed = 0
        state = 0
    else
        state = 1

    //Reset state delay
    statedelay = 0

}

//Mario is jumping if there is no ground below him
else
{

    //Delay the change to the jump state
    if statedelay &gt; 4
        state = 2
    else
        statedelay++

}

//Check if Mario is standing on a slippery surface
if collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_slippery,0,0)
    isslip = 1
else
    isslip = 0

//Prevent Mario from falling down too fast
if vspeed &gt; 4
    vspeed = 4

//Figure out what Mario's max speed should be

//Frog Mario can not run
if global.powerup = cs_frog
and global.yoshi = 0
    hspeedmax = 1.5

//Bee Mario is slow when he is flying
else if global.powerup = cs_bee
and isfloating = 1
    hspeedmax = 1

//If the run key is being held, go faster
else if keyboard_check(vk_control)
    hspeedmax = 3

//Otherwise, move slower
else
    hspeedmax = 1.5

//Handles Mario's jumping
if keyboard_check_pressed(vk_shift)
and disablecontrols = 0

//Make sure that Mario can jump
and ((jumpnow = 0
and state &lt; 2)

//Allow Mario to jump off of Yoshi or a shoe while in midair
or (keyboard_check(vk_up)
and isduck = 0
and global.yoshi &gt; 0)

//Allow propeller Mario to do his special jump
or (global.powerup = cs_propeller
and stompstyle = 0
and isduck = 0
and holding = 0))
{

    //Jump higher if Mario is running
    if abs(hspeed) &gt; 2.8
        vspeed = -4.5

    //If Mario is not running
    else
    {

        //Jump high if you are frog Mario, and you are not riding anything
        if global.powerup = cs_frog
        and global.yoshi = 0
            vspeed = -4.5

        //Jump lower if you are not running
        else
        {

            //Jump even lower if you are walking super slowly
            if round(hspeed/2) = 0
                vspeed = -3.85

            //Jump slightly higher if you are walking
            else
                vspeed = -4.05

        }
    }

    //Make Mario spin jump
    if (keyboard_check(vk_up)
    and isduck = 0
    and (holding = 0 or global.yoshi &gt; 0))
    or state = 2
    {

        //Set spin jump variable
        stompstyle = 1

        //Play spin jump sound
        audio_play_sound(snd_spin,0,0)

        //Create spin jump projectiles
        alarm[7] = 10

        //Get off of Yoshi if he is on one
        if global.yoshi = 1
            with obj_yoshi event_user(1)

        //Get off of a shoe if he is on one
        else if global.yoshi = 2
            with obj_kuriboshoe event_user(0)

    }

    //Play the jump sound if he is not spin jumping
    else
        audio_play_sound(snd_jump,0,0)

    //Enable variable jumping
    jumpnow = 1

    //Switch to the jump state
    state = 2

}

//Check if Mario should still be variable jumping
if keyboard_check_released(vk_shift)
and jumpnow = 1
    jumpnow = 2

//If Mario is ducking on the ground
if isduck = 1 and state != 2
{

    //Slow down Mario's horizontal speed
    if hspeed &gt; 0
        hspeed-=0.05
    if hspeed &lt; 0
        hspeed+=0.05

    //If Mario is slow enough, stop his horizontal speed entirely
    if abs(hspeed) &lt; 0.05
        hspeed = 0

}

//If Mario is not ducking on the ground
else
{

    //Handles moving right
    if keyboard_check(vk_right)
    and not keyboard_check(vk_left)
    and disablecontrols = 0
    {

        //If Mario is not at his maximum speed
        if hspeed &lt; hspeedmax
        {

            //Accelerate slower if he is on a slippery surface
            if isslip = 1
                hspeed += 0.04

            //Default acceleration
            else
            {

                //Accelerate more if he is skidding
                if hspeed &lt; 0
                    hspeed += 0.075

                //Accelerate
                hspeed += 0.06

            }
        }

        //Change Mario's direction if he is not wall jumping
        if walljump = 0
            direct = 1

    }

    //Handles moving left
    else if keyboard_check(vk_left)
    and not keyboard_check(vk_right)
    and disablecontrols = 0
    {

        //If Mario is not at his maximum speed
        if hspeed &gt; -hspeedmax
        {

            //Accelerate slower if he is on a slippery surface
            if isslip = 1
                hspeed -= 0.04

            //Default acceleration
            else
            {

                //Accelerate more if he is skidding
                if hspeed &gt; 0
                    hspeed += -0.075

                //Accelerate
                hspeed += -0.06

            }
        }

        //Change Mario's direction if he is not wall jumping
        if walljump = 0
            direct = -1
    }

    //Takes care of slowing Mario down if he is not jumping and left/right is not being pressed
    else if state != 2
    {

        //If Mario is not on a slippery surface
        if isslip = 0
        {

            //Slow down Mario's horizontal speed
            if hspeed &gt; 0
                hspeed-=0.05
            else if hspeed &lt; 0
                hspeed+=0.05

            //If Mario is slow enough, stop his horizontal speed entirely
            if abs(hspeed) &lt; 0.05
                hspeed = 0

        }
        else
        {

            //Slow down Mario's horizontal speed
            if hspeed &gt; 0
                hspeed-=0.025
            else if hspeed &lt; 0
                hspeed+=0.025

            //If Mario is slow enough, stop his horizontal speed entirely
            if abs(hspeed) &lt; 0.025
                hspeed = 0

        }
    }

    //Slow Mario down if he is faster than his maximum speed
    if state != 2
    and abs(hspeed) &gt; hspeedmax
    {

        //Slow down Mario's horizontal speed
        if hspeed &gt; 0
            hspeed-=0.025
        else if hspeed &lt; 0
            hspeed+=0.025

        //If Mario is slow enough, stop his horizontal speed entirely
        if abs(hspeed) &lt; 0.025
            hspeed = 0
    }

}

//If Mario is jumping
if state = 2
or statedelay &gt; 0
{

    //Variable jumping
    if vspeed &gt; -1
    or jumpnow != 1
    {

        //Normal gravity
        gravity = 0.3

        //End variable jumping if it never ends manually
        if jumpnow = 1
            jumpnow = 2

    }

    //Lower gravity while in the middle of variable jumping
    else
        gravity = 0.1

    //Propeller Mario jumping
    if global.powerup = cs_propeller
    {

        //If Mario is spin jumping normally
        if stompstyle = 1
        and global.yoshi = 0
        {

            //Lower the gravity
            gravity = gravity/2

            //Allow Mario to charge downwards
            if keyboard_check(vk_down)
                vspeed = 4
            else if vspeed &gt; 1
                vspeed = 1

            //Play the sound when he charges downwards
            if keyboard_check_pressed(vk_down)
                audio_play_sound(snd_spin,0,0)

        }

    }

}

//Makes Mario start climbing
if place_meeting(x,y,obj_climb)
and (keyboard_check(vk_up) or keyboard_check(vk_down))
and holding = 0
and disablecontrols = 0
{

    //Change to climb state
    state = 3

    //Stop movement
    gravity = 0
    speed = 0

    //Disable carrot and bee Mario floating
    isfloating = 0

    //Reset wall jump
    walljump = 0

    //Stop carrot/bee Mario's floating sound
    if floatnow = 1
    {
        audio_stop_sound(snd_spin)
        floatnow = 0
    }

}

//Handles sliding down slopes and shell/penguin Mario sliding
if keyboard_check_pressed(vk_down)
and disablecontrols = 0
and holding = 0
{

    //If shell/penguin Mario is walking, do the special sliding
    if (global.powerup = cs_shell or global.powerup = cs_penguin)
    and state = 1
        with instance_create(x,y,obj_slider) event_user(0)

    //If Mario is on a slope, and the above didn't happen, slide normally
    else if collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+3,obj_slopeparent,1,0)
    and not collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+3,obj_solidtop,0,0)
        instance_create(x,y,obj_slider)

}

//Kuribo shoes give Mario the special stomp ability at all times
if global.yoshi = 2
    stompstyle = 1

//Disable spin jumping if Mario is not jumping, or holding something
else if stompstyle = 1
{

    if state != 2
    or holding != 0
        stompstyle = 0

}

//If Mario is jumping, not ducking, not spin jumping, can control himself, and is not riding anything
if state = 2
and isduck = 0
and stompstyle = 0
and disablecontrols = 0
and global.yoshi = 0
{

    //Handles leaf and tanooki Mario's flying
    if (global.powerup = cs_leaf or global.powerup = cs_tanooki)
    and keyboard_check_pressed(vk_shift)
    and jumpnow != 1
    {

        //Fly if the P-meter is flashing and float otherwise
        if obj_levelmanager.pmeter &gt; 5
            vspeed = -4
        else
            vspeed = -0.5

        //Wiggle animation
        wiggle = 16

        //Sound effect
        audio_play_sound(snd_spin,0,0)

    }

    //Handles checking whether Mario can wall climb or wall jump
    if (global.powerup = cs_ninja or global.powerup = cs_walljump)
    and vspeed &gt; 0
    and holding = 0
    {

        //If the direction Mario is facing is pressed, while a wall is in front of him
        if (keyboard_check(vk_right)
        and collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0)
        and direct = 1)
        or (keyboard_check(vk_left)
        and collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0)
        and direct = -1)
        {

            //Make Mario start wall climbing/jumping
            state = 4

            //Stop all vertical movement
            vspeed = 0

            //Disable gravity
            gravity = 0

            //Disable carrot and bee Mario floating
            isfloating = 0

            //Change directions if not ninja climbing
            if global.powerup != cs_ninja
                direct = -direct

            //Stop carrot/bee Mario's floating sound
            if floatnow = 1
            {
                audio_stop_sound(snd_spin)
                floatnow = 0
            }

            //He wall jumped
            walljump = 1

        }

    }

    //Handles carrot and bee Mario's floating
    if (global.powerup = cs_carrot or (global.powerup = cs_bee and beefly &lt; 128))
    and keyboard_check(vk_shift)
    {

        //If Mario is moving downwards
        if vspeed &gt; 0
        {

            //Set the floating variable
            isfloating = 1

            //Bee Mario flies upwards if the ceiling is not above him
            if global.powerup = cs_bee
            and not collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_solid,1,0)
            {

                //Fly upwards
                vspeed = -1.5

                //Make the bee timer tick extra because of the initial push
                beefly += 8

            }

            //Carrot Mario floats down slowly
            else
                vspeed = 0.5

        }

        //If Mario is not moving downwards
        else
        {

            //If bee Mario is floating
            if global.powerup = cs_bee
            and isfloating = 1
            {

                //Continue flying upwards
                vspeed = -1.5

                //Make the bee timer tick
                beefly++

                //Slow bee Mario down if he is moving too fast
                if hspeed &gt; 1
                    hspeed -= 0.1
                if hspeed &lt; -1
                    hspeed += 0.1

            }

            //Stop floating otherwise
            else
                isfloating = 0

        }

    }

    //Stop floating
    else
        isfloating = 0

}

//Stop floating
else
    isfloating = 0

//If carrot or bee Mario is floating, but the sound is not playing
if isfloating = 1
and floatnow = 0
{

    //Mark that the sound is playing
    floatnow = 1

    //Loop the sound
    audio_play_sound(snd_spin,0,1)

}

//If carrot or bee Mario is not floating, but the sound is playing
else if isfloating = 0
and floatnow = 1
{

    //Mark that the sound is not playing
    floatnow = 0

    //Stop the sound
    audio_stop_sound(snd_spin)

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario bounce off an enemy
if not instance_exists(obj_slider)
{

    //Enable variable jumping if shift is held down
    if keyboard_check(vk_shift)
        jumpnow = 1
    else
        jumpnow = 2
    vspeed = -4

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hurt Mario

//If Mario is not invincible
if invincible = 0
{

    //Make Mario temporarily invincible
    event_user(6)

    //If Mario is not riding anything
    if global.yoshi = 0
    {

        //If Mario is small
        if global.powerup = cs_small
        {

            //Kill Mario
            instance_create(x,y,obj_deadmario)
            instance_destroy()

        }

        //If Mario is not small
        else
        {

            //If Mario is big
            if global.powerup = cs_big
            {

                //Make him small
                global.powerup = cs_small

                //Drop the reserve item
                with obj_levelmanager event_user(4)

            }

            //Otherwise, make him big
            else
                global.powerup = cs_big

            //Play hurt sounds
            audio_play_sound(snd_warp,0,0)
            audio_play_sound(snd_ow,0,0)

        }

    }

    //If Mario is riding something
    else
    {

        //If Mario is on a Yoshi
        if global.yoshi = 1
        {

            //Create runaway Yoshi
            instance_create(obj_yoshi.x,obj_yoshi.y,obj_yoshi_runaway)

            //Destroy Yoshi
            with obj_yoshi instance_destroy()

        }

        //If Mario is on a shoe
        else if global.yoshi = 2
        {

            //No more shoe kill ability
            stompstyle = 0

            //Play hurt sounds
            audio_play_sound(snd_magic,0,0)
            audio_play_sound(snd_ow,0,0)

            //Destroy the shoe
            instance_create(x,y+16,obj_statuesmoke)
            with obj_kuriboshoe instance_destroy()

        }

        //Stop riding
        global.yoshi = 0

        //Reset visibility
        visible = 1

    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute destroy event
instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draws Mario

//Make Mario flash
if isflashing = 1
    shader_set(sha_invert)

//Draw Mario
draw_sprite_ext(sprite_index,image_index,round(x),y,direct,1,0,c_white,image_alpha)

//Reset flashing
if isflashing = 1
    shader_reset()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,-16</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
