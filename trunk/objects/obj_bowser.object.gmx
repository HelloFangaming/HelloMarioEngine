<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bowser</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_bossparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The king of all koopas

//How vulnerable is this enemy to various items?
hardness = 99

//How vulnerable is this enemy to Mario?
stomp = 2

//How many hits before this boss dies
hitpoints = 99

//Facing direction
direct = 1

//Do not animate
image_speed = 0

//State variable
ready = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prepare to fight

//Hop
alarm[0] = 10

//Leap and stomp
alarm[2] = 200

//Fire projectiles
alarm[6] = 60
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Finish breathing fire

//Play fire sound
audio_play_sound(snd_podoboo,0,0)

//Breathe fire
instance_create(x,y+8,obj_bowserfire)

//Change state
ready = 0

//Change pose
image_index = 0

//Breathe more later
alarm[6] = 50
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Continue fire breathing animation
image_index = 3
alarm[8] = 7
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prepare to breathe fire

//If Bowser is ready, can jump, and is not turning
if ready = 0
{

    //Fire breathing state
    ready = -3

    //Change pose
    image_index = 2

    //Continue fire breathing animation
    alarm[7] = 7

}

//Otherwise, wait
else
    alarm[6] = 5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start turning after stomping

//Turning state
ready = 6

//Change sprite
sprite_index = spr_bowser_flip

//Start animation
image_index = 0
image_speed = 0.15
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if bricks were smashed

//If there is still a floor below, then finish falling
if collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,0)
{
    alarm[5] = 20
    ready = 5
}

//Otherwise, continue falling
else
{
    vspeed = 3
    ready = 4
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stomp downwards

//Move down
vspeed = 4

//Stomp state
ready = 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Leap and stomp
if ready = 0
and instance_exists(obj_mario)
{

    //Jump state
    ready = 1

    //Boost jump
    y--

    //Face Mario
    if x &gt; obj_mario.x
        direct = 1
    else
        direct = -1

    //Find a position to jump a
    var movex = round(obj_mario.x/16)*16

    //If a solid is there, change where to jump
    if place_meeting(movex,16,obj_solid)
    {
        if x &gt; movex
            movex += 16
        else
            movex -= 16
    }

    //Leap to that point
    move_towards_point(movex,16,4)

    //Change pose
    image_index = 0

}
else
    alarm[2] = 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Finish hop

//Change pose
image_index = 0

//Reset state
ready = 0

//Hop again
alarm[0] = 10
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hop
if ready = 0
{

    //Use hop pose
    image_index = 1

    //Move up
    vspeed = -1

    //Boost jump
    y--

    //Hop state
    ready = -4

    //Finish hop
    alarm[1] = 40

}
else
    alarm[0] = 3
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bowser's true genius

//Deal with floor collisions BOWSER'S WAY
if collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,0)
or ready &gt; 0
{
    gravity = 0
    if ready &lt; 1
        vspeed = 0
}
else
    gravity = 0.05

//If Bowser is ready to ROCK AND ROLL
if ready = 0
{

    //Remember previous facing direction
    var dprev = direct

    //Face Mario
    if instance_exists(obj_mario)
    {
        if x &gt; obj_mario.x
            direct = 1
        else
            direct = -1
    }

    //If he is facing a different direction
    if dprev != direct
    {

        //Turning state
        ready = -1

        //Turn sprite
        sprite_index = spr_bowser_flip

        //Start turning animation
        image_index = 0
        image_speed = 0.15

    }

}

//If Bowser reaches the peak of his jump
else if ready = 1
and y &lt; 17
{

    //Stop moving
    speed = 0

    //Snap to grid
    move_snap(16,16)

    //Change pose
    image_index = 4

    //Get ready to SMASH MARIO'S FACE OFF
    alarm[3] = 10

    //The SMASH MARIO'S FACE state
    ready = -2

}

//If Bowser stomps on the ground
else if ready = 2
and collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,0)
{

    //His footsteps are like THUNDER
    audio_play_sound(snd_thunder,0,0)

    //Stop falling
    vspeed = 0

    //Snap to grid
    move_snap(16,16)

    //Some kind of limbo state?
    ready = 3

    //Check if bricks were smashed
    alarm[4] = 2

    //Change pose
    image_index = 5

}

//If Bowser is falling after smashing bricks
else if ready = 4
and collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,0)
{

    //Stop falling
    vspeed = 0

    //Snap to grid
    move_snap(16,16)

    //Finish stomp state
    ready = 5

    //Start turning
    alarm[5] = 20

}

//Bowser will NEVER LET THIS HAPPEN
else if ready = -5
and bbox_top &gt; room_height
    instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_lava">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drown in lava
if ready &gt; 0
{

    //Appear behind lava
    depth = 10

    //Sink into lava
    vspeed = 0.5

    //Death state
    ready = -5

    //Use appropriate image index
    image_speed = 0
    image_index = 4

    //Play Bowser death sound
    audio_play_sound(snd_bowserfall,0,0)

    //End boss battle
    event_user(6)

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solidtop">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Floor collision
if y &lt; other.y-43 and vspeed &gt; 0
{
    y = other.y-48
    vspeed = 0
    gravity = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Finish turning

//If Bowser is done turning
if ready = -1
or ready = 8
{

    //If he is done turning after a stomp
    if ready = 8
    {

        //Prepare to fight
        alarm[10] = 2

        //Face Mario
        if instance_exists(obj_mario)
        {
            if x &gt; obj_mario.x
                direct = 1
            else
                direct = -1
        }

    }

    //Change sprite
    sprite_index = spr_bowser

    //Reset state
    ready = 0

    //Do not animate
    image_speed = 0

    //Use normal pose
    image_index = 0

}

//If Bowser needs to keep turning after a stomp
else if ready &gt; 5
{

    //Increment state
    ready++

    //Face the other way
    direct = -direct

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Bowser
draw_sprite_ext(sprite_index,image_index,round(x),y,direct,1,0,c_white,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,0</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
