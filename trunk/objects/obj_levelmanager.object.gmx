<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_enemymask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manages the level, and required for all levels

/*
**  This item uses creation code!
**
**  leveltime = The time limit in seconds (Optional)
**  levelmusic = The level music (Any sound resource you load in)
**
*/

//Default Values:
leveltime = 0
levelmusic = 0

//Begin playing the music if you did not carry over a star/switch effect from a previous room
if global.pswitch = 0
and global.star = 0
    alarm[0] = 2

//Make the view follow along
view_object[0] = obj_levelmanager

//Music not disabled
musicdisabled = 0

//Animation variable
anim = 0

//Increment animation variable
alarm[5] = 7

//Barrier not enforced
barrier = 1

//Enforce barrier
alarm[6] = 3

//P-Switch is off
switchon = 0

//P-Meter state
pmeter = 0

//P-Meter slowdown
slowdown = 0

//Enable P-Meter
alarm[7] = 15
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the screen shake when thwomp sound plays
if audio_is_playing(snd_thwomp)
{
    if anim%2
        view_yview[0] += 4
    else
        view_yview[0] -= 4
    alarm[11] = 7
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turns off the P-Switch

//If the P-Switch is on
if switchon = 1
{

    //Turn off the P-Switch
    switchon = 0

    //Swap coins with bricks and bricks with coins
    event_user(2)

    //Make P-Coins invisible
    with obj_pcoin visible = 0

    //Get rid of hidden springs
    with obj_spring_blue
    {
        instance_create(x,y,obj_smoke)
        instance_destroy()
    }

    //Make hidden doors invisible
    with obj_door_hidden visible = 0
    with obj_door_hidden_locked visible = 0

    //Turn off P-Platforms
    with obj_pplatform event_user(1)

    //Turn on conveyor belts
    with obj_conveyor_left image_speed = 0.75
    with obj_conveyor_right image_speed = 0.75

    //Stop the switch song
    audio_stop_sound(snd_switchsong)

    //Restart the starman music if it was stopped due to overlap
    if instance_exists(obj_invincibility)
        audio_play_sound(snd_starman,99,1)

    //Otherwise, restart the music
    else
        alarm[0] = 1

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the P-Meter flash

//If Mario is no longer fast enough, and on the ground
if instance_exists(obj_mario)
and abs(obj_mario.hspeed) &lt;= 2.8
and obj_mario.state &lt; 2
{

    //Stop the annoying sound
    audio_stop_sound(snd_pmeter)

    //Make the P-Meter not maxed out
    pmeter = 5

    //Continue the P-Meter loop
    alarm[7] = 15

}

//Otherwise, if the P-Meter is still maxed out
else if pmeter &gt; 5
{

    //Flash between frames 6 and 7
    if pmeter = 6
        pmeter = 7
    else
        pmeter = 6

    //Continue flashing
    alarm[9] = 7

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End the P-Meter flight time
if pmeter &gt; 5
{

    //If Mario is still running, keep the meter on
    if instance_exists(obj_mario)
    and abs(obj_mario.hspeed) &gt; 2.8
    and obj_mario.state &lt; 2
        alarm[8] = 100

    //Otherwise
    else
    {

        //Stop the annoying sound
        audio_stop_sound(snd_pmeter)

        //Make the P-Meter not maxed out
        pmeter = 5

        //Continue the P-Meter loop
        alarm[7] = 15

    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///P-Meter loop

//If Mario exists
if instance_exists(obj_mario)
{

    //If Mario is running fast enough
    if abs(obj_mario.hspeed) &gt; 2.8
    and obj_mario.state = 1
    {

        //Increment the P-Meter if it is not maxed out
        if pmeter &lt; 6
            pmeter++

    }

    //If Mario is too slow, or not running, and the P-Meter is not too low, decrement slowly
    else if pmeter &gt; 0
    and slowdown = 2
        pmeter--

    //Slow down decrements
    slowdown++

    //Restart decrement timer
    if slowdown = 3
        slowdown = 0

}

//Otherwise, decrement the P-Meter
else if pmeter &gt; 0
    pmeter--

//If the P-Meter is maxed out
if pmeter = 6
{

    //Play that annoying sound
    audio_play_sound(snd_pmeter,1,1)

    //Limit the P-Meter flight time
    alarm[8] = 300

    //Make the P-Meter flash
    alarm[9] = 7

}

//Otherwise, continue the loop
else
    alarm[7] = 15
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enforce barrier
barrier = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increment animation variable
anim++

//Continue incrementing
alarm[5] = 7
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kill Mario

//If Mario exists
if instance_exists(obj_mario)
{

    //Kill Mario
    instance_create(obj_mario.x,obj_mario.y,obj_deadmario)
    with obj_mario instance_destroy()

}

//Otherwise, delay the inevitable
else
    alarm[4] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play the hurry up sound

//Delay the sound if a star/switch is in effect
if audio_is_playing(snd_starman)
or audio_is_playing(snd_switchsong)
    alarm[3] = 60
else
{

    //Hurry up!
    audio_play_sound(snd_hurryup,1,0)

    //Stop the music
    alarm[1] = 1

    //Play the music after the hurry up sound is done
    alarm[0] = 120

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Decrement the time variable

//If there is time left
if global.timer &gt; 0
{

    //Decrement
    global.timer--

    //Decrement the time again after a second
    alarm[2] = 60

    //Play the hurry up sound at 100 seconds left
    if global.timer = 101
        alarm[3] = 60

    //Kill Mario at 0 seconds
    else if global.timer = 1
        alarm[4] = 61

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop the music
audio_stop_sound(levelmusic)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Loop the music
if not audio_is_playing(levelmusic)
and musicdisabled = 0
and switchon = 0
    audio_play_sound(levelmusic,99,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with various game logic stuff

//Follow the autoscroll if it exists
if instance_exists(obj_autoscroll)
{
    x = obj_autoscroll.x
    y = obj_autoscroll.y
}

//Follow Mario if he exists
else if instance_exists(obj_mario)
{
    x = obj_mario.x
    y = obj_mario.y+16
}

//Follow goal Mario if he exists
else if instance_exists(obj_goalmario)
{
    x = obj_goalmario.x
    y = obj_goalmario.y+16
}

//Follow warp Mario if he exists
else if instance_exists(obj_warpmario)
{
    x = obj_warpmario.x
    y = obj_warpmario.y+16
}

//Follow jump spawn Mario if he exists
else if instance_exists(obj_jumpspawn)
{
    x = obj_jumpspawn.x
    y = obj_jumpspawn.y+16
}

//Follow vine spawn Mario if he exists
else if instance_exists(obj_vinespawn)
{
    x = obj_vinespawn.x
    y = obj_vinespawn.y+16
}

//Do not let the screen fall behind the classic scroll
if instance_exists(obj_classicscroll)
and x &lt; obj_classicscroll.x
    x = obj_classicscroll.x

//Parallax scrolling for layer 0 backgrounds
background_x[0] = view_xview[0]/2

//Deactivate things that have the following parents
instance_deactivate_object(obj_deactenemyparent)
instance_deactivate_object(obj_deactivation)

//Activate things that are on screen
instance_activate_region(view_xview[0]-32,view_yview[0]-32,view_wview[0]+64,view_hview[0]+64,1)

//If the barrier is enforced, and Mario exists
if barrier = 0
and instance_exists(obj_mario)
{

    //If space is pressed, drop the reserve item
    if keyboard_check_pressed(vk_space)
        event_user(4)

    //If Mario moves off the left side of the screen
    if obj_mario.x &lt; view_xview[0]+5
    {

        //Snap Mario to the side of the screen
        obj_mario.x = view_xview[0]+5

        //Stop Mario if he keeps trying to move off
        if obj_mario.hspeed &lt; 0
            obj_mario.hspeed = 0

        //Stop sliding Mario if he keeps trying to move off (Sneaky!)
        if instance_exists(obj_slider)
            obj_slider.x = view_xview[0]+5

    }

    //If Mario moves off the right side of the screen
    else if obj_mario.x &gt; view_xview[0]+view_wview[0]-5
    {

        //Snap Mario to the side of the screen
        obj_mario.x = view_xview[0]+view_wview[0]-5

        //Stop Mario if he keeps trying to move off
        if obj_mario.hspeed &gt; 0
            obj_mario.hspeed = 0

        //Stop sliding Mario if he keeps trying to move off (Sneaky!)
        if instance_exists(obj_slider)
            obj_slider.x = view_xview[0]+view_wview[0]-5

    }

}

//If there are over 99 coins collected
if global.coins &gt; 99
{

    //Subtract 100 coins
    global.coins -= 100

    //Create the extra life on Mario if he exists
    if instance_exists(obj_mario)
        with instance_create(obj_mario.x-8,obj_mario.y,obj_score) event_user(7)

    //Otherwise, create the extra life on the level manager
    else
        with instance_create(x-8,y,obj_score) event_user(7)

}

//Make the screen shake if thwomp sound plays
if not audio_is_playing(snd_thwomp)
    alarm[11] = 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drop the reserve item

//If a reserve item exists
if global.reserveitem &gt; cs_small
{

    //Create the reserve item
    with instance_create(view_xview[0]+152,view_yview[0]+8,obj_reserveitem) sprite_index = scr_constant_get_sprite(global.reserveitem)

    //Remove the reserve item
    global.reserveitem = cs_small

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disable music
musicdisabled = 1

//Stop music
audio_stop_sound(levelmusic)

//Stop all possible fanfares
audio_stop_sound(snd_starman)
audio_stop_sound(snd_switchsong)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Swap coins with bricks and bricks with coins

//Turn bricks into fake coins
with obj_brick
{
    instance_create(x,y,obj_coinchange)
    instance_destroy()
}

//Turn coins into bricks
with obj_coin
{
    instance_create(x,y,obj_brick)
    instance_destroy()
}

//Turn fake coins into coins
with obj_coinchange
{
    instance_create(x,y,obj_coin)
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turns on the P-Switch

//If the P-Switch is off
if switchon = 0
{

    //Turn on the P-Switch
    switchon = 1

    //Swap coins with bricks and bricks with coins
    event_user(2)

    //Make P-Coins visible
    with obj_pcoin visible = 1

    //Create hidden springs
    with obj_spring_hidden instance_create(x,y,obj_spring_blue)

    //Make hidden doors visible
    with obj_door_hidden visible = 1
    with obj_door_hidden_locked visible = 1

    //Turn on P-Platforms
    with obj_pplatform event_user(0)

    //Turn off conveyor belts
    with obj_conveyor_left image_speed = 0
    with obj_conveyor_right image_speed = 0

    //Start the switch song if it is not playing, and stop the regular music
    if not audio_is_playing(snd_switchsong)
    {
        audio_play_sound(snd_switchsong,99,1)
        alarm[1] = 1
    }

    //Prevent the starman music from overlapping
    audio_stop_sound(snd_starman)

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy all player objects
with obj_mario instance_destroy()
with obj_warpmario instance_destroy()
with obj_jumpspawn instance_destroy()
with obj_vinespawn instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remember that the P-Switch is on for the next room

//If the switch is on, remember the time limit
if switchon = 1
    global.pswitch = alarm[10]

//Stop the P-Meter sound if it is looping
if audio_is_playing(snd_pmeter)
    audio_stop_sound(snd_pmeter)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles Mario Start, checkpoints, and other stuff

//If the music is not the same as the music used in the last room
if global.levelmusic != levelmusic
{

    //Stop the old music
    audio_stop_sound(global.levelmusic)

    //Set the new music
    global.levelmusic = levelmusic

}

//If the time is set to something, and was not set in a previous room, set it
if leveltime &gt; 0
and global.timer = 0
    global.timer = leveltime

//If the timer was set, begin ticking
if global.timer &gt; 0
    alarm[2] = 60

//If Mario just started the level
if global.mariostart = 0
{

    //The level has started
    global.mariostart = 1

    //Handles checkpoints
    if instance_exists(global.checkpoint)
    {

        //Destroy all player objects
        event_user(0)

        //Create a new Mario at the desired location
        instance_create(global.checkpoint.x+8,global.checkpoint.y+16,obj_mario)

    }

    //Create the Mario Start! effect
    instance_create(0,0,obj_mariostart)

}

//If position changing is enabled
if global.postchange != -1
{

    //Destroy all player objects
    event_user(0)

    //Create the desired object at the desired location
    if global.postchange = 0
        instance_create(global.postx,global.posty,obj_mario)
    else if global.postchange = 1
        instance_create(global.postx,global.posty,obj_warpmario)
    else if global.postchange = 2
        instance_create(global.postx,global.posty,obj_jumpspawn)
    else if global.postchange = 3
        instance_create(global.postx,global.posty,obj_vinespawn)

    //Disable position changing
    global.postchange = -1

}

//Create a Yoshi or shoe if Mario had one in a previous room
if global.yoshi = 1
    instance_create(0,0,obj_yoshi)
else if global.yoshi = 2
    instance_create(0,0,obj_kuriboshoe)

//If Mario is not riding anything, and carried something from a previous room
else if global.carrieditem != noone
{

    //With the newly created item
    with instance_create(x-8,y+15,global.carrieditem)
    {

        //If the item's parent is the subcon carry parent, remember that
        if object_get_parent(object_index) = obj_carryparent
            global.shallihold = 1

        //If the parent is the normal hold parent
        else
        {

            //Remember that
            global.shallihold = 2

            //This item is being held
            held = 1

        }

        //If the item needs a different sprite
        if global.carriedsprite != noone
        {

            //Change its sprite
            sprite_index = global.carriedsprite

            //Reset the variable
            global.carriedsprite = noone

        }
    }

    //If Mario exists
    if instance_exists(obj_mario)
    {

        //Make Mario hold the item appropriately
        obj_mario.holding = global.shallihold

        //Reset the variable
        global.shallihold = 0

    }

    //Reset the variable
    global.carrieditem = noone

}

//If the P-Switch needs to carry over from the previous room
if global.pswitch &gt; 0
{

    //Turn on the P-Switch
    event_user(1)

    //Set the timer, and make sure it is not too short
    alarm[10] = max(global.pswitch,30)

    //Reset the variable
    global.pswitch = 0

}

//If a star needs to carry over from the previous room
if global.star &gt; 0
{

    //With the newly created invincibility object, set its time limit, and make sure it is not too short
    with instance_create(x,y,obj_invincibility) alarm[0] = max(global.star,30)

    //Reset the variable
    global.star = 0

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the HUD

//Set the font
draw_set_font(global.wdigits)

//Set the draw alpha
draw_set_alpha(0.7)

//Draw the HUD bar
draw_sprite_ext(spr_hudbar,0,view_xview[0]+4,view_yview[0]+1,1,1,0,c_white,0.7)

//Draw the lives
draw_sprite_ext(spr_mariohud,0,view_xview[0]+58,view_yview[0]+10,1,1,0,c_white,0.7)
draw_text(view_xview[0]+82,view_yview[0]+10,string_format(lives,2,0))

//Draw the score
draw_text(view_xview[0]+254,view_yview[0]+10,string_add_zeros(score,7))

//Draw the coin count
draw_sprite_ext(spr_coinhud,0,view_xview[0]+194,view_yview[0]+10,1,1,0,c_white,0.7)
draw_text(view_xview[0]+201,view_yview[0]+10,string_add_zeros(global.coins,2))

//Draw the world number
draw_sprite_ext(spr_worldhud,0,view_xview[0]+10,view_yview[0]+10,1,1,0,c_white,0.7)
draw_sprite_ext(spr_numbersgold,global.world,view_xview[0]+42,view_yview[0]+10,1,1,0,c_white,0.7)

//Change the font
draw_set_font(global.gdigits)

//Draw the time
draw_sprite_ext(spr_timehud,0,view_xview[0]+104,view_yview[0]+10,1,1,0,c_white,0.7)
draw_text(view_xview[0]+114,view_yview[0]+10,string_add_zeros(global.timer,3))

//Draw the P-Meter
draw_sprite_ext(spr_pmeter,pmeter,view_xview[0]+16,view_yview[0]+228,1,1,0,c_white,0.7)

//Draw the reserve items
if global.reserveitem = cs_fire
or global.reserveitem = cs_ice
    draw_sprite_ext(scr_constant_get_sprite(global.reserveitem),anim,view_xview[0]+152,view_yview[0]+7,1,1,0,c_white,0.7)
else if global.reserveitem != cs_small
    draw_sprite_ext(scr_constant_get_sprite(global.reserveitem),0,view_xview[0]+152,view_yview[0]+7,1,1,0,c_white,0.7)

//Reset the draw alpha
draw_set_alpha(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause the game
if not keyboard_check(vk_alt)
{

    //Create the pause menu
    instance_create(0,0,obj_pauseshade)

    //Clear the enter key
    keyboard_clear(vk_enter)

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
