<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mapmario_small</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_square</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario on the World Map!

//If Mario has been on the world map in the past
if ds_map_exists(global.worldmap,"returnx")
{

    //Load the return variables
    returnx = ds_map_find_value(global.worldmap,"returnx")
    returny = ds_map_find_value(global.worldmap,"returny")

    //Load Mario's previous position
    x = ds_map_find_value(global.worldmap,"mapx")
    y = ds_map_find_value(global.worldmap,"mapy")

}

//If this is Mario's first time on the world map
else
{

    //Set the return variables to the current location
    returnx = x
    returny = y

}

//Recreate the card minigame panel if it was there previously
if ds_map_find_value(global.worldmap,"cardgame") &gt; 0
    instance_create(ds_map_find_value(global.worldmap,"cardgamex"),ds_map_find_value(global.worldmap,"cardgamey"),obj_mapcard)

//Change Mario's sprite to the one corresponding with the current powerup
sprite_index = scr_mariomap()

//Sprite animation speed
image_speed = 0.15

//Mario's current state
ready = 0

//The text to be displayed on the HUD as the level name
mytext = ""

//Is the inventory open?
inventory = 0

//Which inventory irem is selected?
boxselection = 1

//Did Mario die before returning to the world map?
if global.died = 1
and global.clear = 0
{

    //If so, make him move to the return location
    move_towards_point(returnx,returny,1)

    //Play the spin sound
    alarm[4] = 1

    //Set the correct state for this action
    ready = 2

}

//Did Mario clear a level
else if global.clear &gt; 0
{

    //If so, set the alarm that accounts for this
    alarm[2] = 30

    //Set the correct state for this action
    ready = 1

}

//Play music if none of the above actions occured
else
    alarm[3] = 1

//Reset all of these global variables
global.time = 0
global.mariostart = 0
global.carrieditem = noone
global.carriedsprite = noone
global.shallihold = 0
global.pswitch = 0
global.star = 0
global.onoffblock = 0
global.died = 0

//Prevent shoes from being taken between levels
if global.yoshi = 2
    global.yoshi = 0

//Clear the records of collected ace coins
ds_map_clear(global.acecoins)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario's sound as he skids towards his previous location
audio_play_sound(snd_spin,1,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play the world map music
audio_play_sound(snd_mapmusic,99,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario's victorious cleared level script!

//Find the id of the panel Mario is on
panel = collision_point(x+8,y+8,obj_worldparent,0,0)

//If there is a panel there (Why wouldn't there be?)
if panel
{

    //Call the panel's clear script if the level is beaten normally
    if global.clear = 1
        with panel event_user(2)

    //If the level's secret exit was cleared
    else if global.clear = 2
    {

        //Play the secret exit sound
        audio_play_sound(snd_openpath,0,0)

        //Check above for a lock
        lock = collision_point(x+8,y-8,obj_lock,0,0)

        //If there is a lock
        if lock
        {

            //Unlock the panel's upper path
            panel.open[1] = 1

            //Make the lock destroy itself
            with lock event_user(0)

        }

        //Check below for a lock
        lock = collision_point(x+8,y+23,obj_lock,0,0)

        //If there is a lock
        if lock
        {

            //Unlock the panel's lower path
            panel.open[0] = 1

            //Make the lock destroy itself
            with lock event_user(0)

        }

        //Check to the left for a lock
        lock = collision_point(x-8,y+8,obj_lock,0,0)

        //If there is a lock
        if lock
        {

            //Unlock the panel's leftward path
            panel.open[3] = 1

            //Make the lock destroy itself
            with lock event_user(0)

        }

        //Check to the right for a lock
        lock = collision_point(x+23,y+8,obj_lock,0,0)

        //If there is a lock
        if lock
        {

            //Unlock the panel's rightward path
            panel.open[2] = 1

            //Make the lock destroy itself
            with lock event_user(0)

        }

    }

}

//What should happen after the clear animation is done
alarm[1] = 60
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///For after the level clear or death skid animations

//Reset the state
ready = 0

//If Mario cleared a level with a saver object on it, create the save menu
if global.clear &gt; 0
and collision_point(x+8,y+8,obj_saver,1,1)
    instance_create(0,0,obj_savemenu)

//If the target score was reached for the card minigame to show up, and there is no card panel on the map
if score &gt; global.cardscore
and not instance_exists(obj_mapcard)
{

    //Set a new target score
    global.cardscore += 80000

    //Place the minigame panel on the start panel if it needs to be created on Mario's current location
    if returnx = x
    and returny = y
        instance_create(obj_start.x,obj_start.y,obj_mapcard)

    //Otherwise, create it at the previously beaten level
    else
        instance_create(returnx,returny,obj_mapcard)

}

//Set the new return values
returnx = x
returny = y

//Reset the clear global variable
global.clear = 0

//Play the music
alarm[3] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop Mario from moving
speed = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles Mario's logic in the world map

//If Mario is death skidding, and reached his location
if ready = 2
and round(x) = returnx
and round(y) = returny
{

    //Stop the sound
    audio_stop_sound(snd_spin)

    //Change to the event state
    ready = 1

    //Stop moving
    speed = 0

    //Make sure his coordinates are exact
    x =  returnx
    y = returny

    //Set the alarm to allow Mario to move
    alarm[1] = 60

}

//If Mario is in his normal state
else if ready = 0
{

    //Get the id of the panel he is on
    panel = collision_point(x+8,y+8,obj_panelparent,0,0)

    //If he is not moving
    if speed = 0
    {

        //If the up key is pressed
        if keyboard_check_pressed(vk_up)
        {

            //If there is no solid in the way
            if not position_meeting(x+8,y-8,obj_solid)
            {

                //If the panel, if it exists, is not beaten or not open in the up direction, play the bump sound
                if panel
                and panel.beaten = 0
                and panel.open[1] = 0
                    audio_play_sound(snd_bump,0,0)

                //Otherwise, move up 32 pixels
                else
                {
                    audio_play_sound(snd_move,0,0)
                    vspeed = -2
                    alarm[0] = 16
                }

            }

            //Otherwise, play the bump sound
            else
                audio_play_sound(snd_bump,0,0)

        }

        //If the down key is pressed
        else if keyboard_check_pressed(vk_down)
        {

            //If there is no solid in the way
            if not position_meeting(x+8,y+23,obj_solid)
            {

                //If the panel, if it exists, is not beaten or not open in the down direction, play the bump sound
                if panel
                and panel.beaten = 0
                and panel.open[0] = 0
                    audio_play_sound(snd_bump,0,0)

                //Otherwise, move down 32 pixels
                else
                {
                    audio_play_sound(snd_move,0,0)
                    vspeed = 2
                    alarm[0] = 16
                }

            }

            //Otherwise, play the bump sound
            else
                audio_play_sound(snd_bump,0,0)

        }

        //If the left key is pressed
        else if keyboard_check_pressed(vk_left) 
        {

            //If there is no solid in the way
            if not position_meeting(x-4,y+8,obj_solid)
            {

                //If the panel, if it exists, is not beaten or not open in the left direction, play the bump sound
                if panel
                and panel.beaten = 0
                and panel.open[3] = 0
                    audio_play_sound(snd_bump,0,0)

                //Otherwise, move left 32 pixels
                else
                {
                    audio_play_sound(snd_move,0,0)
                    hspeed = -2
                    alarm[0] = 16
                }

            }

            //Otherwise, play the bump sound
            else
                audio_play_sound(snd_bump,0,0)

        }

        //If the right key is pressed
        else if keyboard_check_pressed(vk_right)
        {

            //If there is no solid in the way
            if not position_meeting(x+23,y+8,obj_solid)
            {

                //If the panel, if it exists, is not beaten or not open in the right direction, play the bump sound
                if panel
                and panel.beaten = 0
                and panel.open[2] = 0
                    audio_play_sound(snd_bump,0,0)

                //Otherwise, move right 32 pixels
                else
                {
                    audio_play_sound(snd_move,0,0)
                    hspeed = 2
                    alarm[0] = 16
                }

            }

            //Otherwise, play the bump sound
            else
                audio_play_sound(snd_bump,0,0)

        }

        //If the inventory is not open, and space is pressed
        else if inventory = 0
        and keyboard_check_pressed(vk_space)
        {

            //Play the inventory sound
            audio_play_sound(snd_inventory,0,0)

            //Set the event state
            ready = 1

            //Open the inventory
            inventory = 1

            //Reset the selection
            boxselection = 1

            //If the inventory is empty
            if global.inventory[0] = 0
            {

                //If the reserve item is empty, select nothing, otherwise select it
                if global.reserveitem = cs_small
                    boxselection = 0
                else
                    boxselection = 16
            }

        }

        //Change the parent being checked
        panel = collision_point(x+8,y+8,obj_worldparent,0,0)

        //If Mario is on a panel
        if panel
        {

            //Take its name for display
            mytext = panel.levelname

            //If shift is pressed, and the panel can be triggered
            if keyboard_check_pressed(vk_shift)
            and panel.ready = 0
            {

                //Prepare to leave the world map
                event_user(0)

                //Go where the panel takes you
                with panel event_user(3)

            }

        }

    }

    //If he is moving
    else 
    {

        //If he is on a panel
        if panel
        {

            //Open the panel's up direction if he is moving up
            if direction = 90
                panel.open[0] = 1

            //Open the panel's down direction if he is moving down
            else if direction = 270
                panel.open[1] = 1

            //Open the panel's left direction if he is moving left
            else if direction = 180
                panel.open[2] = 1

            //Open the panel's right direction if he is moving right
            else if direction = 0
                panel.open[3] = 1

        }

        //Reset the text
        mytext = ""

    }

}

//If the inventory is open
else if inventory = 1
{

    //If space is pressed
    if keyboard_check_pressed(vk_space)
    {

        //Play the inventory sound
        audio_play_sound(snd_inventory,0,0)

        //Go back to the normal state
        ready = 0

        //Close the inventory
        inventory = 0

    }

    //If the inventory is not empty
    else if boxselection != 0
    {

        //If shift is pressed
        if keyboard_check_pressed(vk_shift)
        {

            //If the item selected is the reserve item
            if boxselection = 16
            {

                //Swap the current powerup with the reserve item
                var previous = global.powerup
                global.powerup = global.reserveitem
                global.reserveitem = previous

                //Finish item retrieval
                event_user(1)

            }

            //If the item selected is not the reserve item
            else
            {

                //Remember the last powerup
                var previous = global.powerup

                //Change the powerup to the selected item
                global.powerup = global.inventory[boxselection]

                //If Mario had no powerup previously
                if previous = 0
                {

                    //Shift the inventory items over by one
                    for(var i = boxselection; i &lt; global.inventory[0]; i++)
                        global.inventory[i] = global.inventory[i+1]

                    //Subtract from the number of items in the inventory
                    global.inventory[0]--

                }

                //Otherwise, put the old powerup in the inventory
                else
                    global.inventory[boxselection] = previous

                //Finish item retrieval
                event_user(1)

            }

        }

        //If left is pressed, there are items in the inventory, and the selected item is not the leftmost item
        else if boxselection &gt; 1
        and global.inventory[0] != 0
        and keyboard_check_pressed(vk_left)
        {

            //If the reserve item is selected, go to the last inventory item
            if boxselection = 16
                boxselection = global.inventory[0]

            //Otherwise, go left one item
            else
                boxselection--

            //Play the move sound
            audio_play_sound(snd_move,0,0)

        }

        //If right is pressed, and the selected item is not the rightmost item
        else if boxselection &lt; 16
        and keyboard_check_pressed(vk_right)
        {

            //If there are more inventory items, go right one
            if boxselection &lt; global.inventory[0]
                boxselection++

            //Otherwise, if there is a reserve item, go to it
            else if global.reserveitem &gt; cs_small
                boxselection = 16

            //Otherwise, do not play the move sound
            else
                exit

            //Play the move sound
            audio_play_sound(snd_move,0,0)

        }

    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory retrieval script

//Play the reserve item sound
audio_play_sound(snd_retrieve,0,0)

//Make Mario speak words
if global.powerup = cs_big
    audio_play_sound(snd_jwin,0,0)
else
    audio_play_sound(snd_gotcha,0,0)

//Update the sprite
sprite_index = scr_mariomap()

//Go back to the normal state
ready = 0

//Close the inventory
inventory = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///What happens when Mario enters a level

//Save the return variables
ds_map_replace(global.worldmap,"returnx",returnx)
ds_map_replace(global.worldmap,"returny",returny)

//Save Mario's current location
ds_map_replace(global.worldmap,"mapx",x)
ds_map_replace(global.worldmap,"mapy",y)

//Stop the music
audio_stop_sound(snd_mapmusic)

//Play the enter level sound
audio_play_sound(snd_enterstage,0,0)

//Mario's voice
audio_play_sound(snd_letsgo,0,0)

//Yoshi's voice
if global.yoshi = 1
    audio_play_sound(snd_yoshi_happy,0,0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Mario and the World Map HUD

//Show the event sprite for the clear state
if ready = 1
    draw_sprite(spr_mapevent,0,x,y)

//Otherwise, if Mario is not on Yoshi, draw him normally
else if global.yoshi = 0
    draw_sprite(sprite_index,image_index,x,y)

//Otherwise, draw him on Yoshi
else if global.yoshi = 1
{

    //Draw Mario...
    draw_sprite(sprite_index,image_index,x,y-7)

    //..on the appropriately colored Yoshi
    if global.ycolor = 0
        draw_sprite(spr_mapyoshi,image_index,x,y)
    else if global.ycolor = 1
        draw_sprite(spr_mapyoshi_r,image_index,x,y)
    else if global.ycolor = 2
        draw_sprite(spr_mapyoshi_y,image_index,x,y)
    else if global.ycolor = 3
        draw_sprite(spr_mapyoshi_b,image_index,x,y)

}

//Draw the HUD box
draw_sprite_ext(spr_mapscreenbox,inventory,view_xview[0],view_yview[0]+210,1,1,0,c_white,0.7)

//If the inventory is not opened up
if inventory = 0
{

    //Set the draw alpha
    draw_set_alpha(0.7)

    //Set the font
    draw_set_font(global.font)

    //Draw the name of the panel Mario is on
    draw_text(view_xview[0]+132,view_yview[0]+221,mytext)

    //Set the font
    draw_set_font(global.wdigits)

    //Draw the lives
    draw_text(view_xview[0]+32,view_yview[0]+222,string_format(lives,2,0))

    //Draw the score
    draw_text(view_xview[0]+65,view_yview[0]+222,string_add_zeros(score,7))

    //Draw the reserve item
    if global.reserveitem != cs_small
        draw_sprite_ext(scr_constant_get_sprite(global.reserveitem),0,view_xview[0]+298,view_yview[0]+217,1,1,0,c_white,0.7)

    //Reset the draw alpha
    draw_set_alpha(1)

}

//If the inventory is opened
else
{

    //Iterate over the inventory items
    for(var i = 1; i &lt;= global.inventory[0]; i++)
    {

        //Use an outline shader if this item is not selected
        if boxselection = i
            shader_reset()
        else
            shader_set(sha_outline)

        //Draw the item
        draw_sprite_ext(scr_constant_get_sprite(global.inventory[i]),0,view_xview[0]+7+(i-1)*19,view_yview[0]+217,1,1,0,c_white,0.7)

    }

    //Use an outline shader if the reserve item is not selected
    if boxselection = 16
        shader_reset()
    else
        shader_set(sha_outline)

    //Draw the reserve item
    if global.reserveitem != cs_small
        draw_sprite_ext(scr_constant_get_sprite(global.reserveitem),0,view_xview[0]+298,view_yview[0]+217,1,1,0,c_white,0.7)

    //Reset shaders
    shader_reset()

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
