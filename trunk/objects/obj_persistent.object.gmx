<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hello Mario Engine's persistent object

//How the screen is fading
//0: From black, 1: To black
mode = 0

//How much the screen is faded
done = 0

//Screenshot of the game, if it exists 
back = -1

//Message to display to the screen
message = ""

//Declare global variables
scr_init_globals()

//Item that is being carried between rooms
global.carrieditem = 0

//The sprite used by an item carried between rooms
global.carriedsprite = 0

//Whether Mario should hold/carry an object
global.shallihold = 0

//The level music
global.levelmusic = snd_gameover

//Data structure for storing collected ace coins
global.acecoins = ds_map_create()

//Data structure for storing the state of the world map
global.worldmap = ds_map_create()

//Data structure for storing the state of the card minigame
global.cardgame = ds_map_create()

//Font for dialog boxes
global.messagefont = font_add_sprite_ext(spr_messagefont,'!"'+"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~",0,0)

//Font for small letters
global.font = font_add_sprite_ext(spr_spritefont,'!"'+"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~",1,-1)

//Font for white digits
global.wdigits = font_add_sprite_ext(spr_numbers,"0123456789",0,0)

//Font for gold digits
global.gdigits = font_add_sprite_ext(spr_numbersgold,"0123456789",0,0)

//Make the x key do everything the shift key does
keyboard_set_map(ord('X'),vk_shift)

//Make the z key do everything the control key does
keyboard_set_map(ord('Z'),vk_control)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to the title screen
room_goto(rm_title)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset the message
message = ""
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center the window
window_center()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deactivate everything
instance_deactivate_all(1)

//Make sure Mario Start! is active
instance_activate_object(obj_mariostart)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop fading to black

//Set mode to fade from black
mode = 0

//If Mario Start! does not exist
if not instance_exists(obj_mariostart)
{

    //Begin fading from black
    done = 0

    //Activate everything
    instance_activate_all()

    //Resume particles
    part_system_automatic_update(1,1)

}

//Delete the screenshot
if background_exists(back)
    background_delete(back)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle all of the hotkeys

//Quit the game when ALT+F4 is pressed
if keyboard_check_pressed(vk_f4)
    game_end()

//Restart the game when ALT+R is pressed
else if keyboard_check_pressed(ord('R'))
{
    audio_stop_all()
    scr_init_globals()
    room_goto(rm_title)
}

//Fullscreen (Handled by GM: Studio
else if keyboard_check_pressed(vk_enter)
{
    if window_get_fullscreen()
        message = "FULLSCREEN ON"
    else
        message = "FULLSCREEN OFF"
    alarm[2] = 1
    alarm[3] = 60
}

//Toggles VSync
else if keyboard_check_pressed(ord('V'))
{
    if vsync = 0
    {
        vsync = 1
        message = "VSYNC ON"
    }
    else
    {
        vsync = 0
        message = "VSYNC OFF"
    }
    display_reset(0,vsync)
    alarm[3] = 60
}

//Turn off filtering if ALT+1 is pressed
else if keyboard_check_pressed(ord('1'))
{
    filter = 0
    message = "NO FILTERING"
    window_set_size(view_wview[0],view_hview[0])
    alarm[2] = 1
    alarm[3] = 60
}

//Turn on HQ2X filtering if ALT+2 is pressed
else if keyboard_check_pressed(ord('2'))
{
    filter = 1
    message = "HQ2X FILTERING"
    window_set_size(view_wview[0]*2,view_hview[0]*2)
    alarm[2] = 1
    alarm[3] = 60
}

//Turn on HQ4X filtering if ALT+3 is pressed
else if keyboard_check_pressed(ord('3'))
{
    filter = 2
    message = "HQ4X FILTERING"
    window_set_size(view_wview[0]*4,view_hview[0]*4)
    alarm[2] = 1
    alarm[3] = 60
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade the screen to black

//If this event was called manually
if mode = 0
{

    //Take a screenshot
    back = background_create_from_surface(view_surface_id[0],0,0,view_wview[0],view_hview[0],0,0)

    //Pause particles
    part_system_automatic_update(1,0)

    //Deactivate everything
    instance_deactivate_all(1)

}

//Start fading
done = 0

//To black
mode = 1

//Make sure it stops when its done
alarm[0] = 30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prepare to fade to black

//Fade to black
mode = 1

//Take a screenshot
back = background_create_from_surface(view_surface_id[0],0,0,view_wview[0],view_hview[0],0,0)

//Free the game surface
if surface_exists(view_surface_id[0])
    surface_free(view_surface_id[0])

//Set alarm to execute when the next room starts
alarm[1] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create the game surface
view_surface_id[0] = surface_create(view_wview[0],view_hview[0])

//Fade the screen to black, unless you just opened up the game
if mode = 1
    event_user(0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save Fullscreen + Filtering + VSync Settings

//Open the file
var file = file_text_open_write("Settings.dat")

//Save fullscreen settings
file_text_write_string(file,string(window_get_fullscreen()))
file_text_writeln(file)

//Save filtering settings
file_text_write_string(file,string(filter))
file_text_writeln(file)

//Save vsync settings
file_text_write_string(file,string(vsync))

//Close the file
file_text_close(file)

//Sticky control key bug fix
keyboard_key_release(vk_control)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load Fullscreen + Filtering + VSync Settings
if file_exists("Settings.dat")
{

    //Open the file 
    var file = file_text_open_read("Settings.dat")

    //Set fullscreen mode based on the read value
    window_set_fullscreen(real(file_text_read_string(file)))
    file_text_readln(file)

    //Set filtering mode based on the read value
    filter = real(file_text_read_string(file))
    file_text_readln(file)

    //Set vsync based on the read value
    vsync = real(file_text_read_string(file))

    //Close the file
    file_text_close(file)

}
else
{

    //Set the default to HQ4X only if the screen is big enough to fit it
    if display_get_height() &gt;= 960
        filter = 2
    else
        filter = 1

    //VSync is on by default
    vsync = 1

}

//HQ2x
if filter = 1
    window_set_size(view_wview[0]*2,view_hview[0]*2)

//HQ4X
else if filter = 2
    window_set_size(view_wview[0]*4,view_hview[0]*4)

//VSync
display_reset(0,vsync)

//Center the view
alarm[2] = 1

//Play the coin sound at the splash screen
audio_play_sound(snd_coin,0,0)

//Go to the title screen
alarm[4] = 200
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with the game surface, filtering, and fading

//Draws the game surface if it exists
if surface_exists(view_surface_id[0])
{
    draw_enable_alphablend(0)

    //No Filter
    if filter = 0
        draw_surface(view_surface_id[0],0,0)

    //HQ2X Filtering
    else if filter = 1
    {
        shader_set(sha_hq2x)
        draw_surface_stretched(view_surface_id[0],0,0,view_wview[0]*2,view_hview[0]*2)
        shader_reset()
    }

    //HQ4X Filtering
    else if filter = 2
    {
        shader_set(sha_hq4x)
        draw_surface_stretched(view_surface_id[0],0,0,view_wview[0]*4,view_hview[0]*4)
        shader_reset()
    }

    draw_enable_alphablend(1)

}

//Repair the game surface
else
    view_surface_id[0] = surface_create(view_wview[0],view_hview[0])

//Fades the screen to and from black
if done &lt; 1
{

    //Increment fading
    done += 1/30

    //Fade from black
    if mode = 0
        draw_set_alpha(1-done)

    //Fade to black
    else
        draw_set_alpha(done)

    //Draw the fade
    draw_set_color(c_black)
    draw_rectangle(0,0,2000,2000,0)
    draw_set_alpha(1)
    draw_set_color(c_white)

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draws the screenshot shown when fading to black
if background_exists(back)
{
    draw_enable_alphablend(0)
    draw_background(back,view_xview[0],view_yview[0])
    draw_enable_alphablend(1)
}

//Display messages
draw_set_font(global.font)
draw_text(view_xview[0],view_yview[0],message)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
